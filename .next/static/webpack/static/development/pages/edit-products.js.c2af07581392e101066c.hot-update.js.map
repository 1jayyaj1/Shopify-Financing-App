{"version":3,"file":"static/webpack/static/development/pages/edit-products.js.c2af07581392e101066c.hot-update.js","sources":["webpack:///./pages/edit-products.js"],"sourcesContent":["import {\n    Banner,\n    Card,\n    DisplayText,\n    Form,\n    FormLayout,\n    Layout,\n    Page,\n    PageActions,\n    TextField,\n    Toast,\n  } from '@shopify/polaris';\n  import gql from 'graphql-tag';\n  import { Mutation } from 'react-apollo';\n  import store from 'store-js';\n  \n  const UPDATE_PRICE = gql`\n    mutation productVariantUpdate($input: ProductVariantInput!) {\n      productVariantUpdate(input: $input) {\n        userErrors {\n          field\n          message\n        }\n        product {\n          title\n        }\n        productVariant {\n          id\n          price\n        }\n      }\n    }\n  `;\n\n\n\n  class EditProduct extends React.Component {\n    state = {\n      interest: 10,\n      period: 4,\n      frequency: 2,\n      price: '',\n      variantId: '',\n\n      showToast: false,\n    };\n  \n    componentDidMount() {\n      this.setState({ discount: this.itemToBeConsumed() });\n    }\n  \n    render() {\n      const { name, price, discount, variantId } = this.state;\n  \n      return (\n        <Mutation\n          mutation={UPDATE_PRICE}\n        >\n          {(handleSubmit, { error, data }) => {\n            const showError = error && (\n              <Banner status=\"critical\">{error.message}</Banner>\n            );\n            const showToast = data && data.productVariantUpdate && (\n              <Toast\n                content=\"Sucessfully updated\"\n                onDismiss={() => this.setState({ showToast: false })}\n              />\n            );\n\n            return (\n              <Page>\n                <Layout>\n                  {showToast}\n                  <Layout.Section>\n                    {showError}\n                  </Layout.Section>\n                  <Layout.Section>\n                    <DisplayText size=\"large\">{name}</DisplayText>\n                    <Form>\n                      <Card sectioned>\n                        <FormLayout>\n                          <FormLayout.Group>\n                            <TextField\n                              prefix=\"$\"\n                              value={price}\n                              disabled={true}\n                              label=\"Original price\"\n                              type=\"price\"\n                            />\n                            <TextField\n                              prefix=\"$\"\n                              value={discount}\n                              onChange={this.handleChange('discount')}\n                              label=\"Discounted price\"\n                              type=\"discount\"\n                            />\n                          </FormLayout.Group>\n                          <p>\n                            This sale price will expire in two weeks on{' '}\n                            {this.props.expires}\n                          </p>\n                        </FormLayout>\n                      </Card>\n                      <PageActions\n                        primaryAction={[\n                          {\n                            content: 'Save',\n                            onAction: () => {\n                              const productVariableInput = {\n                                id: variantId,\n                                price: discount\n                              };\n                              handleSubmit({\n                                variables: { input: productVariableInput },\n                              });\n                            },\n                          },\n                        ]}\n                        secondaryActions={[\n                          {\n                            content: 'Remove discount'\n                          },\n                        ]}\n                      />\n                    </Form>\n                  </Layout.Section>\n                </Layout>\n              </Page>\n            );\n          }}\n        </Mutation>\n      );\n    }\n  \n    handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n    };\n  \n    itemToBeConsumed = () => {\n      const item = store.get('item');\n      const price = item.variants.edges[0].node.price;\n      const variantId = item.variants.edges[0].node.id;\n      const discounter = ((this.state.interest/this.state.frequency)*price)/(1-(Math.pow(1 + this.state.interest, -this.state.period)))\n      const rate = this.state.interest / 100 / this.state.frequency;\n      return (this.state.price / ((Math.pow(1 + rate, this.state.frequency) - 1)) * rate);\n      console.log(discounter)\n      this.setState({ price, variantId });\n  \n      return (price - discounter).toFixed(2);\n    };\n  }\n  \n  export default EditProduct;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAYA;AACA;AACA;AAEA;AACA;AAmBA;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAPA;AACA;AAgGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;;;;;AAvGA;AACA;AAAA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AADA;AAGA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAQA;AAAA;AAEA;AAAA;AAIA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AACA;AACA;AALA;AAeA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAAA;AAAA;AADA;AAGA;AAVA;AAaA;AAEA;AADA;AAhBA;AA0BA;AAGA;;;;AAhGA;AACA;AAmHA;;;;A","sourceRoot":""}